import random
import json
from pathlib import Path
from datetime import datetime, timezone
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.utils.markdown import hlink
from bot.config.flags import BEST_QA_ENABLE

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º
BASE_DIR = Path(__file__).resolve().parent.parent
DATA_DIR = BASE_DIR / "data"
STATS_FILE = DATA_DIR / "best_qa_stats.json"
LAST_WINNER_FILE = DATA_DIR / "last_winner.json"


def ensure_config_directory():
    """
    –°–æ–∑–¥–∞—ë—Ç –ø–∞–ø–∫—É config, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç.
    """
    DATA_DIR.mkdir(exist_ok=True)


def load_json(file_path):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON-—Ñ–∞–π–ª–∞.
    """
    ensure_config_directory()
    try:
        with open(file_path, "r", encoding="utf-8") as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}


def save_json(file_path, data):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON-—Ñ–∞–π–ª.
    """
    ensure_config_directory()
    with open(file_path, "w", encoding="utf-8") as file:
        json.dump(data, file, indent=4, ensure_ascii=False)


def update_last_winner(chat_id, chat_title, user_id, full_name, username):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ –≤ JSON-—Ñ–∞–π–ª–µ.
    """
    last_winner = load_json(LAST_WINNER_FILE)

    chat_id = str(chat_id)
    last_winner[chat_id] = {
        "chat_title": chat_title,
        "last_datetime": datetime.now(timezone.utc).isoformat(),
        "winner": {
            "user_id": user_id,
            "full_name": full_name,
            "username": username or ""
        }
    }

    save_json(LAST_WINNER_FILE, last_winner)


def update_stats(chat_id, chat_title, user_id, full_name, username):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –≤ JSON-—Ñ–∞–π–ª–µ.
    """
    stats = load_json(STATS_FILE)

    chat_id = str(chat_id)
    if chat_id not in stats:
        stats[chat_id] = {"chat_title": chat_title, "winners": {}}

    winners = stats[chat_id]["winners"]
    user_key = str(user_id)

    if user_key not in winners:
        winners[user_key] = {
            "full_name": full_name,
            "username": username or "",
            "wins": 0
        }

    winners[user_key]["wins"] += 1
    save_json(STATS_FILE, stats)


def get_last_winner(chat_id):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ –∏–∑ JSON-—Ñ–∞–π–ª–∞.
    """
    last_winner = load_json(LAST_WINNER_FILE)
    return last_winner.get(str(chat_id))


def is_new_day(chat_id):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Å—Ç—É–ø–∏–ª –ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å (–≤ 00:00 UTC) –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞.
    :param chat_id: ID —á–∞—Ç–∞
    :return: True, –µ—Å–ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å; –∏–Ω–∞—á–µ False.
    """
    last_winner = get_last_winner(chat_id)
    if not last_winner:
        return True

    last_datetime = last_winner.get("last_datetime")
    if not last_datetime:
        return True

    last_date = datetime.fromisoformat(last_datetime).date()
    current_date = datetime.now(timezone.utc).date()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –¥–∞—Ç–∞ —Å —Ç–µ–∫—É—â–µ–π
    return current_date > last_date


async def get_random_participant(bot, chat_id):
    """
    –í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ (–∏—Å–∫–ª—é—á–∞—è –±–æ—Ç–æ–≤).
    """
    members = []
    admin_list = await bot.get_chat_administrators(chat_id)

    for member in admin_list:
        if not member.user.is_bot:
            members.append(member.user)

    return random.choice(members) if members else None


async def check_group_chat(message: Message):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ.
    """
    if message.chat.type == "private":
        await message.reply("–í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞ –≤–æ–∑–º–æ–∂–µ–Ω "
                            "—Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.")
        return False
    return True


async def notify_best_qa(message: Message):
    """
    –£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ —Ç–µ–∫—É—â–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–µ.
    """
    last_winner = get_last_winner(message.chat.id)

    if not last_winner:
        await message.reply("–î–∞–Ω–Ω—ã–µ –æ –ª—É—á—à–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. "
                            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        return

    winner = last_winner["winner"]
    mention = hlink(winner["full_name"], f"tg://user?id={winner['user_id']}")
    await message.answer(f"–°–µ–≥–æ–¥–Ω—è –ª—É—á—à–∏–π —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –≤—ã–±—Ä–∞–Ω: "
                         f"{mention} üéâ", parse_mode="HTML")


async def select_best_qa(message: Message):
    """
    –í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç —á–∞—Ç.
    """
    best_qa = await get_random_participant(message.bot, message.chat.id)

    if not best_qa:
        await message.reply("–ù–µ –Ω–∞—à—ë–ª —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞.")
        return

    update_last_winner(
        chat_id=message.chat.id,
        chat_title=message.chat.title or "–õ–∏—á–Ω—ã–π —á–∞—Ç",
        user_id=best_qa.id,
        full_name=best_qa.full_name,
        username=best_qa.username
    )

    update_stats(
        chat_id=message.chat.id,
        chat_title=message.chat.title or "–õ–∏—á–Ω—ã–π —á–∞—Ç",
        user_id=best_qa.id,
        full_name=best_qa.full_name,
        username=best_qa.username
    )

    mention = hlink(best_qa.full_name, f"tg://user?id={best_qa.id}")
    await message.answer(f"–°–µ–≥–æ–¥–Ω—è –ª—É—á—à–∏–π —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ "
                         f"{mention} üéâ", parse_mode="HTML")


async def handle_best_qa(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /best_qa.
    """
    if not BEST_QA_ENABLE:
        return await message.answer("–ö–æ–º–∞–Ω–¥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")

    if not await check_group_chat(message):
        return

    if not is_new_day(message.chat.id):
        await notify_best_qa(message)
        return

    await select_best_qa(message)


def register_best_qa_handler(dp):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /best_qa.
    """
    dp.message.register(handle_best_qa, Command(commands=["best_qa"]))
